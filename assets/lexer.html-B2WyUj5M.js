import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as i,o as t}from"./app-D4QNsgVA.js";const s={};function l(p,e){return t(),a("div",null,e[0]||(e[0]=[i(`<h1 id="词法分析" tabindex="-1"><a class="header-anchor" href="#词法分析"><span>词法分析</span></a></h1><p>词法分析的目的在于将输入的源代码字符流按照语言的规范解析为 Token 流， 以用于后续进一步的解析。同时词法分析还能在编译早期就检查一些格式错误。</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>词法分析器一个字符一个字符的读入源码，然后基于设定好的状态机，将字符序列识别为指定类型的 Token, 在这个过程中，词法分析器还会给出 Token 所在源码中的位置，相关上下文等信息，用于后续的错误处理。</p><p>词法分析器可以在解析 Token 的过程中发现源码中的格式错误，包括：</p><ul><li>非法的标识符</li><li>非法的字面量</li><li>非法的符号</li><li>等等</li></ul><p>同时词法分析器一般不会发现一个错误就停止解析，而是会从错误状态恢复，从而在一遍运行中收集尽可能多的错误信息。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>为了方便词法分析器的实现，我们采用 flex 或 antlr 来辅助实现词法分析器，我们也鼓励从零实现词法分析器。最终我们期望词法分析器能输出类似下面的内容：</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int &#39;int&#39;        [StartOfLine]  Loc=&lt;.\\main.cu:1:1&gt;</span></span>
<span class="line"><span>identifier &#39;__host__&#39;    [LeadingSpace] Loc=&lt;.\\main.cu:1:5&gt;</span></span>
<span class="line"><span>identifier &#39;main&#39;        [LeadingSpace] Loc=&lt;.\\main.cu:1:14&gt;</span></span>
<span class="line"><span>l_paren &#39;(&#39;             Loc=&lt;.\\main.cu:1:18&gt;</span></span>
<span class="line"><span>r_paren &#39;)&#39;             Loc=&lt;.\\main.cu:1:19&gt;</span></span>
<span class="line"><span>l_brace &#39;{&#39;      [LeadingSpace] Loc=&lt;.\\main.cu:1:21&gt;</span></span>
<span class="line"><span>return &#39;return&#39;  [StartOfLine] [LeadingSpace]   Loc=&lt;.\\main.cu:3:3&gt;</span></span>
<span class="line"><span>numeric_constant &#39;0&#39;     [LeadingSpace] Loc=&lt;.\\main.cu:3:10&gt;</span></span>
<span class="line"><span>semi &#39;;&#39;                Loc=&lt;.\\main.cu:3:11&gt;</span></span>
<span class="line"><span>r_brace &#39;}&#39;      [StartOfLine]  Loc=&lt;.\\main.cu:4:1&gt;</span></span>
<span class="line"><span>eof &#39;&#39;          Loc=&lt;.\\main.cu:4:2&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const o=n(s,[["render",l],["__file","lexer.html.vue"]]),d=JSON.parse('{"path":"/task1/lexer.html","title":"词法分析","lang":"zh-CN","frontmatter":{"description":"词法分析 词法分析的目的在于将输入的源代码字符流按照语言的规范解析为 Token 流， 以用于后续进一步的解析。同时词法分析还能在编译早期就检查一些格式错误。 原理 词法分析器一个字符一个字符的读入源码，然后基于设定好的状态机，将字符序列识别为指定类型的 Token, 在这个过程中，词法分析器还会给出 Token 所在源码中的位置，相关上下文等信息，用...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/SYsU-GPUC/task1/lexer.html"}],["meta",{"property":"og:site_name","content":"SYsU-GPC 实验文档"}],["meta",{"property":"og:title","content":"词法分析"}],["meta",{"property":"og:description","content":"词法分析 词法分析的目的在于将输入的源代码字符流按照语言的规范解析为 Token 流， 以用于后续进一步的解析。同时词法分析还能在编译早期就检查一些格式错误。 原理 词法分析器一个字符一个字符的读入源码，然后基于设定好的状态机，将字符序列识别为指定类型的 Token, 在这个过程中，词法分析器还会给出 Token 所在源码中的位置，相关上下文等信息，用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-22T11:33:01.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-22T11:33:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"词法分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-22T11:33:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LuoWeiLinWillam\\",\\"url\\":\\"https://github.com/LuoWeiLinWillam\\"}]}"]]},"headers":[{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1729596781000,"updatedTime":1729596781000,"contributors":[{"name":"Yurzi","email":"yurzi@foxmail.com","commits":1}]},"readingTime":{"minutes":1.32,"words":397},"filePathRelative":"task1/lexer.md","localizedDate":"2024年10月22日","autoDesc":true}');export{o as comp,d as data};
