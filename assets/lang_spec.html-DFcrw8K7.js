import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as e}from"./app-D4QNsgVA.js";const n={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="语言设定" tabindex="-1"><a class="header-anchor" href="#语言设定"><span>语言设定</span></a></h1><p>为了简便和充分的利用现有的 Clang/LLVM 工具链，SYsU-GPUC 将基于 CUDA C，并在这之上做出自己的简化和修改。</p><h2 id="编程范式与模型" tabindex="-1"><a class="header-anchor" href="#编程范式与模型"><span>编程范式与模型</span></a></h2><p>SYsU-GPUC 将使用过程式编程范式和简化沿用 CUDA C 的 CUDA 编程模型。具体的说，SYsU-GPUC 中的基本编程单元只有函数，同时只支持编写 CUDA 编程模型中的核函数（kernel）和设备函数（device）。</p><p>再者，SYsU-GPUC 在 CUDA 线程级上只使用单点操作，这意味着在每个函数将不具备分支与循环。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>SYsU-GPUC 认为有三类数据类型：标量类型（Scalar Type）、张量类型（Tensor Type）和指针类型（Pointer Type）。</p><h3 id="标量类型" tabindex="-1"><a class="header-anchor" href="#标量类型"><span>标量类型</span></a></h3><ul><li>double: 64位浮点标量</li></ul><h3 id="张量类型" tabindex="-1"><a class="header-anchor" href="#张量类型"><span>张量类型</span></a></h3><ul><li>double [N]: 64位浮点张量，其中长度N在形式参数声明时可省略。</li></ul><h3 id="指针类型" tabindex="-1"><a class="header-anchor" href="#指针类型"><span>指针类型</span></a></h3><ul><li>double*: 64位浮点指针类型</li></ul><h2 id="运算" tabindex="-1"><a class="header-anchor" href="#运算"><span>运算</span></a></h2><p>为了简便，SYsU-GPUC 进行的运算均是逐元素计算，这意味对张量进行二元计算时，张量的必须长度相等，并进行逐元素的计算。</p><h3 id="单操作数运算" tabindex="-1"><a class="header-anchor" href="#单操作数运算"><span>单操作数运算</span></a></h3><ul><li>取反(-)： -scalar, -tensor</li><li>取地址(&amp;): &amp;scalar</li><li>取值(*): *pointer</li></ul><h3 id="双操作数运算" tabindex="-1"><a class="header-anchor" href="#双操作数运算"><span>双操作数运算</span></a></h3><ul><li>加法(+)：scalar + scalar, scalar + tensor, tensor + tensor (the same size, elementwise)</li><li>减法(-): scalar - scalar, scalar - tensor, tensor - tensor (the same size, elementwise)</li><li>乘法(_): scalar _ scalar, scalar _ tensor, tensor _ tensor (the same size, elementwise)</li><li>除法(/): scalar / scalar, scalar / scalar, tensor / tensor (the same size, elementwise)</li></ul><h2 id="数据的内存类型" tabindex="-1"><a class="header-anchor" href="#数据的内存类型"><span>数据的内存类型</span></a></h2><ul><li><code>__shared__</code>: 线程块共享内存</li><li><code>__local__</code>: 局部内存</li><li><code>__global__</code>: 全局内存</li><li><code>__constant__</code>: 常量内存</li></ul><h2 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型"><span>函数类型</span></a></h2><p>SYsU-GPUC 有两种类型的函数，设备函数与核函数，使用下列标识符来标明函数类型。</p><ul><li><code>__device__</code>: 设备函数</li><li><code>__global__</code>: 核函数</li></ul><h2 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span>样例</span></a></h2><p>这里给出使用 SYsU-GPUC 语言编写程序的样例。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __device__ </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">calc_square_diff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e2;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __global__ </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">calc_mse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">doubel </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> idx </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> threadId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // built-in thread id for cuda</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calc_square_diff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[idx], </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[idx]);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> me2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[len] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  e2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> me2h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[len] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> me2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  d </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sqrt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(me2h);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)]))}const r=s(n,[["render",t],["__file","lang_spec.html.vue"]]),d=JSON.parse('{"path":"/lang_spec.html","title":"语言设定","lang":"zh-CN","frontmatter":{"description":"语言设定 为了简便和充分的利用现有的 Clang/LLVM 工具链，SYsU-GPUC 将基于 CUDA C，并在这之上做出自己的简化和修改。 编程范式与模型 SYsU-GPUC 将使用过程式编程范式和简化沿用 CUDA C 的 CUDA 编程模型。具体的说，SYsU-GPUC 中的基本编程单元只有函数，同时只支持编写 CUDA 编程模型中的核函数（k...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/SYsU-GPUC/lang_spec.html"}],["meta",{"property":"og:site_name","content":"SYsU-GPC 实验文档"}],["meta",{"property":"og:title","content":"语言设定"}],["meta",{"property":"og:description","content":"语言设定 为了简便和充分的利用现有的 Clang/LLVM 工具链，SYsU-GPUC 将基于 CUDA C，并在这之上做出自己的简化和修改。 编程范式与模型 SYsU-GPUC 将使用过程式编程范式和简化沿用 CUDA C 的 CUDA 编程模型。具体的说，SYsU-GPUC 中的基本编程单元只有函数，同时只支持编写 CUDA 编程模型中的核函数（k..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-22T11:33:01.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-22T11:33:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"语言设定\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-22T11:33:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LuoWeiLinWillam\\",\\"url\\":\\"https://github.com/LuoWeiLinWillam\\"}]}"]]},"headers":[{"level":2,"title":"编程范式与模型","slug":"编程范式与模型","link":"#编程范式与模型","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"标量类型","slug":"标量类型","link":"#标量类型","children":[]},{"level":3,"title":"张量类型","slug":"张量类型","link":"#张量类型","children":[]},{"level":3,"title":"指针类型","slug":"指针类型","link":"#指针类型","children":[]}]},{"level":2,"title":"运算","slug":"运算","link":"#运算","children":[{"level":3,"title":"单操作数运算","slug":"单操作数运算","link":"#单操作数运算","children":[]},{"level":3,"title":"双操作数运算","slug":"双操作数运算","link":"#双操作数运算","children":[]}]},{"level":2,"title":"数据的内存类型","slug":"数据的内存类型","link":"#数据的内存类型","children":[]},{"level":2,"title":"函数类型","slug":"函数类型","link":"#函数类型","children":[]},{"level":2,"title":"样例","slug":"样例","link":"#样例","children":[]}],"git":{"createdTime":1729596781000,"updatedTime":1729596781000,"contributors":[{"name":"Yurzi","email":"yurzi@foxmail.com","commits":1}]},"readingTime":{"minutes":1.75,"words":524},"filePathRelative":"lang_spec.md","localizedDate":"2024年10月22日","autoDesc":true}');export{r as comp,d as data};
